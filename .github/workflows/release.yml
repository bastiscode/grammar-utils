name: Build, test and release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  # windows:
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.10"
  #     - uses: dtolnay/rust-toolchain@stable
  #     - name: "Rust: Check and test"
  #       run: |
  #         cargo fmt --all -- --check
  #         cargo check
  #         cargo clippy -- -D warnings
  #         cargo test
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         args: --release --out dist
  #     - name: "Python: Install wheels and test import"
  #       run: |
  #         pip install dtpu --find-links dist --force-reinstall
  #         python -c "import grammar_utils"
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - uses: dtolnay/rust-toolchain@stable
      - name: "Rust: Check and test"
        run: |
          cargo fmt --all -- --check
          cargo check
          cargo clippy -- -D warnings
          cargo test
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          manylinux: auto
          args: --release --out dist
      - name: "Python: Install wheels and test import"
        run: |
          pip install dist/*.whl --force-reinstall
          python -c "import grammar_utils"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [linux] #, windows]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Publish release to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *
